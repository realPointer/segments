// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=mocks/mock.go
//
// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	entity "github.com/realPointer/segments/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// AddOrRemoveUserSegments mocks base method.
func (m *MockUser) AddOrRemoveUserSegments(ctx context.Context, userId int, addSegments []entity.AddSegment, removeSegments []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrRemoveUserSegments", ctx, userId, addSegments, removeSegments)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrRemoveUserSegments indicates an expected call of AddOrRemoveUserSegments.
func (mr *MockUserMockRecorder) AddOrRemoveUserSegments(ctx, userId, addSegments, removeSegments any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrRemoveUserSegments", reflect.TypeOf((*MockUser)(nil).AddOrRemoveUserSegments), ctx, userId, addSegments, removeSegments)
}

// CreateUser mocks base method.
func (m *MockUser) CreateUser(ctx context.Context, userId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserMockRecorder) CreateUser(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUser)(nil).CreateUser), ctx, userId)
}

// GetUserOperations mocks base method.
func (m *MockUser) GetUserOperations(ctx context.Context, userId int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserOperations", ctx, userId)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserOperations indicates an expected call of GetUserOperations.
func (mr *MockUserMockRecorder) GetUserOperations(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserOperations", reflect.TypeOf((*MockUser)(nil).GetUserOperations), ctx, userId)
}

// GetUserOperationsByMonth mocks base method.
func (m *MockUser) GetUserOperationsByMonth(ctx context.Context, userId int, yearMonth string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserOperationsByMonth", ctx, userId, yearMonth)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserOperationsByMonth indicates an expected call of GetUserOperationsByMonth.
func (mr *MockUserMockRecorder) GetUserOperationsByMonth(ctx, userId, yearMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserOperationsByMonth", reflect.TypeOf((*MockUser)(nil).GetUserOperationsByMonth), ctx, userId, yearMonth)
}

// GetUserSegments mocks base method.
func (m *MockUser) GetUserSegments(ctx context.Context, userId int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSegments", ctx, userId)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSegments indicates an expected call of GetUserSegments.
func (mr *MockUserMockRecorder) GetUserSegments(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSegments", reflect.TypeOf((*MockUser)(nil).GetUserSegments), ctx, userId)
}

// UploadAndReturnDownloadURL mocks base method.
func (m *MockUser) UploadAndReturnDownloadURL(ctx context.Context, name string, data []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadAndReturnDownloadURL", ctx, name, data)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadAndReturnDownloadURL indicates an expected call of UploadAndReturnDownloadURL.
func (mr *MockUserMockRecorder) UploadAndReturnDownloadURL(ctx, name, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadAndReturnDownloadURL", reflect.TypeOf((*MockUser)(nil).UploadAndReturnDownloadURL), ctx, name, data)
}

// MockSegment is a mock of Segment interface.
type MockSegment struct {
	ctrl     *gomock.Controller
	recorder *MockSegmentMockRecorder
}

// MockSegmentMockRecorder is the mock recorder for MockSegment.
type MockSegmentMockRecorder struct {
	mock *MockSegment
}

// NewMockSegment creates a new mock instance.
func NewMockSegment(ctrl *gomock.Controller) *MockSegment {
	mock := &MockSegment{ctrl: ctrl}
	mock.recorder = &MockSegmentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSegment) EXPECT() *MockSegmentMockRecorder {
	return m.recorder
}

// CreateSegment mocks base method.
func (m *MockSegment) CreateSegment(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSegment", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSegment indicates an expected call of CreateSegment.
func (mr *MockSegmentMockRecorder) CreateSegment(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSegment", reflect.TypeOf((*MockSegment)(nil).CreateSegment), ctx, name)
}

// CreateSegmentAuto mocks base method.
func (m *MockSegment) CreateSegmentAuto(ctx context.Context, name string, percentage float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSegmentAuto", ctx, name, percentage)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSegmentAuto indicates an expected call of CreateSegmentAuto.
func (mr *MockSegmentMockRecorder) CreateSegmentAuto(ctx, name, percentage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSegmentAuto", reflect.TypeOf((*MockSegment)(nil).CreateSegmentAuto), ctx, name, percentage)
}

// DeleteSegment mocks base method.
func (m *MockSegment) DeleteSegment(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSegment", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSegment indicates an expected call of DeleteSegment.
func (mr *MockSegmentMockRecorder) DeleteSegment(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSegment", reflect.TypeOf((*MockSegment)(nil).DeleteSegment), ctx, name)
}

// GetSegments mocks base method.
func (m *MockSegment) GetSegments(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSegments", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSegments indicates an expected call of GetSegments.
func (mr *MockSegmentMockRecorder) GetSegments(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSegments", reflect.TypeOf((*MockSegment)(nil).GetSegments), ctx)
}

// MockScheduler is a mock of Scheduler interface.
type MockScheduler struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerMockRecorder
}

// MockSchedulerMockRecorder is the mock recorder for MockScheduler.
type MockSchedulerMockRecorder struct {
	mock *MockScheduler
}

// NewMockScheduler creates a new mock instance.
func NewMockScheduler(ctrl *gomock.Controller) *MockScheduler {
	mock := &MockScheduler{ctrl: ctrl}
	mock.recorder = &MockSchedulerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScheduler) EXPECT() *MockSchedulerMockRecorder {
	return m.recorder
}

// DeleteExpiredRows mocks base method.
func (m *MockScheduler) DeleteExpiredRows(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExpiredRows", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteExpiredRows indicates an expected call of DeleteExpiredRows.
func (mr *MockSchedulerMockRecorder) DeleteExpiredRows(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExpiredRows", reflect.TypeOf((*MockScheduler)(nil).DeleteExpiredRows), ctx)
}
